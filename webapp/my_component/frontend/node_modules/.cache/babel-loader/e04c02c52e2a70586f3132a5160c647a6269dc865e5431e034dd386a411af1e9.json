{"ast":null,"code":"var _jsxFileName = \"/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx\";\nimport React from \"react\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFocused: false\n    };\n    this.videoStream = null;\n    this.intervalId = null;\n    this.canvasElement = null;\n    this.imageCapture = null;\n    this.startVideoStream = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        this.videoStream = stream;\n        this.imageCapture = new ImageCapture(this.videoStream.getVideoTracks()[0]);\n        this.intervalId = setInterval(() => this.captureAndSendImage(), 1000);\n        this.forceUpdate(); // Trigger a re-render to update the canvas\n      } catch (error) {\n        console.error('Error accessing camera:', error);\n      }\n    };\n    this.stopVideoStream = () => {\n      if (this.videoStream) {\n        this.videoStream.getTracks().forEach(track => track.stop());\n      }\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n      }\n    };\n    this.captureAndSendImage = async () => {\n      if (this.imageCapture && this.canvasElement) {\n        try {\n          const bitmap = await this.imageCapture.grabFrame();\n          const context = this.canvasElement.getContext('2d');\n          if (context) {\n            // Set the canvas dimensions based on the video feed\n            this.canvasElement.width = bitmap.width;\n            this.canvasElement.height = bitmap.height;\n\n            // Draw the image onto the canvas\n            context.drawImage(bitmap, 0, 0, this.canvasElement.width, this.canvasElement.height);\n\n            // Convert canvas content to a Blob\n            this.canvasElement.toBlob(blob => {\n              if (blob) {\n                // Create a data URL for the Blob\n                const url = URL.createObjectURL(blob);\n\n                // Log the URL to the console\n                console.log(url);\n\n                // Send the URL to Streamlit\n                // Streamlit.setComponentValue(url);\n              }\n            }, 'image/jpeg');\n          }\n        } catch (error) {\n          console.error('Error capturing image:', error);\n        }\n      }\n    };\n    this.render = () => {\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      if (theme) {\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : 'gray'}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvas => {\n            this.canvasElement = canvas;\n          },\n          style: {\n            width: '100%',\n            maxWidth: '5000px',\n            height: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  componentDidMount() {\n    this.startVideoStream();\n  }\n  componentWillUnmount() {\n    this.stopVideoStream();\n  }\n}\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","MyComponent","constructor","args","state","isFocused","videoStream","intervalId","canvasElement","imageCapture","startVideoStream","stream","navigator","mediaDevices","getUserMedia","video","ImageCapture","getVideoTracks","setInterval","captureAndSendImage","forceUpdate","error","console","stopVideoStream","getTracks","forEach","track","stop","clearInterval","bitmap","grabFrame","context","getContext","width","height","drawImage","toBlob","blob","url","URL","createObjectURL","log","render","theme","props","style","borderStyling","primaryColor","border","outline","display","flexDirection","alignItems","children","ref","canvas","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","componentDidMount","componentWillUnmount","_c","$RefreshReg$"],"sources":["/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\n\ninterface State {\n  isFocused: boolean;\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { isFocused: false };\n  private videoStream: MediaStream | null = null;\n  private intervalId: NodeJS.Timeout | null = null;\n  private canvasElement: HTMLCanvasElement | null = null;\n  private imageCapture: ImageCapture | null = null;\n\n  public componentDidMount(): void {\n    this.startVideoStream();\n  }\n\n  public componentWillUnmount(): void {\n    this.stopVideoStream();\n  }\n\n  private startVideoStream = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      this.videoStream = stream;\n\n      this.imageCapture = new ImageCapture(this.videoStream.getVideoTracks()[0]);\n\n      this.intervalId = setInterval(() => this.captureAndSendImage(), 1000);\n      this.forceUpdate(); // Trigger a re-render to update the canvas\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n    }\n  };\n\n  private stopVideoStream = () => {\n    if (this.videoStream) {\n      this.videoStream.getTracks().forEach((track) => track.stop());\n    }\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  };\n\n  private captureAndSendImage = async () => {\n    if (this.imageCapture && this.canvasElement) {\n      try {\n        const bitmap = await this.imageCapture.grabFrame();\n        const context = this.canvasElement.getContext('2d');\n        \n        if (context) {\n          // Set the canvas dimensions based on the video feed\n          this.canvasElement.width = bitmap.width;\n          this.canvasElement.height = bitmap.height;\n\n          // Draw the image onto the canvas\n          context.drawImage(bitmap, 0, 0, this.canvasElement.width, this.canvasElement.height);\n\n          // Convert canvas content to a Blob\n          this.canvasElement.toBlob((blob) => {\n            if (blob) {\n              // Create a data URL for the Blob\n              const url = URL.createObjectURL(blob);\n\n              // Log the URL to the console\n              console.log(url);\n\n              // Send the URL to Streamlit\n              // Streamlit.setComponentValue(url);\n            }\n          }, 'image/jpeg');\n        }\n      } catch (error) {\n        console.error('Error capturing image:', error);\n      }\n    }\n  };\n\n  public render = (): ReactNode => {\n    const { theme } = this.props;\n    const style: React.CSSProperties = {};\n\n    if (theme) {\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : 'gray'\n      }`;\n      style.border = borderStyling;\n      style.outline = borderStyling;\n    }\n\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <canvas\n          ref={(canvas) => { this.canvasElement = canvas; }}\n          style={{ width: '100%', maxWidth: '5000px', height: 'auto' }}\n        />\n      </div>\n    );\n  };\n}\n\nexport default withStreamlitConnection(MyComponent);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}