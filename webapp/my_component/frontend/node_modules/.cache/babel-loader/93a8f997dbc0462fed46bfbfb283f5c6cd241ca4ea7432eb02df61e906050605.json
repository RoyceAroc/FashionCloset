{"ast":null,"code":"var _jsxFileName = \"/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx\";\nimport React from \"react\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFocused: false,\n      isRecording: false\n    };\n    this.videoStream = null;\n    this.videoElement = null;\n    this.mediaRecorder = null;\n    this.recordedChunks = [];\n    this.startVideoStream = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        this.videoStream = stream;\n        this.videoElement = document.createElement('video');\n        this.videoElement.srcObject = stream;\n        this.videoElement.onloadedmetadata = () => {\n          this.intervalId = setInterval(() => this.captureAndSendImage(), 2000);\n        };\n      } catch (error) {\n        console.error('Error accessing camera:', error);\n      }\n    };\n    this.captureAndSendImage = () => {\n      if (this.videoElement) {\n        const canvas = document.createElement('canvas');\n        canvas.width = this.videoElement.videoWidth || 0;\n        canvas.height = this.videoElement.videoHeight || 0;\n        const context = canvas.getContext('2d');\n        if (context) {\n          context.drawImage(this.videoElement, 0, 0, canvas.width, canvas.height);\n\n          // Convert canvas content to a Blob\n          canvas.toBlob(blob => {\n            if (blob) {\n              // Create a data URL for the Blob\n              const url = URL.createObjectURL(blob);\n\n              // Log the URL to the console\n              console.log(url);\n\n              // Send the URL to Streamlit\n              Streamlit.setComponentValue(url);\n            }\n          }, 'image/jpeg');\n        }\n      }\n    };\n    this.startRecording = () => {\n      if (this.mediaRecorder) {\n        this.recordedChunks = [];\n        this.mediaRecorder.start();\n        this.setState({\n          isRecording: true\n        });\n      }\n    };\n    this.stopRecording = () => {\n      if (this.mediaRecorder && this.state.isRecording) {\n        this.mediaRecorder.stop();\n        this.setState({\n          isRecording: false\n        });\n      }\n    };\n    this.render = () => {\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      if (theme) {\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : 'gray'}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          height: '600px'\n        },\n        children: [this.videoElement && /*#__PURE__*/_jsxDEV(\"video\", {\n          autoPlay: true,\n          playsInline: true,\n          ref: video => {\n            if (video) video.srcObject = this.videoStream;\n          },\n          style: {\n            width: '100%',\n            height: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.startRecording,\n          disabled: this.state.isRecording,\n          children: \"Start Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.stopRecording,\n          disabled: !this.state.isRecording,\n          children: \"Stop Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  componentDidMount() {\n    this.startVideoStream();\n  }\n}\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Streamlit","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","MyComponent","constructor","args","state","isFocused","isRecording","videoStream","videoElement","mediaRecorder","recordedChunks","startVideoStream","stream","navigator","mediaDevices","getUserMedia","video","document","createElement","srcObject","onloadedmetadata","intervalId","setInterval","captureAndSendImage","error","console","canvas","width","videoWidth","height","videoHeight","context","getContext","drawImage","toBlob","blob","url","URL","createObjectURL","log","setComponentValue","startRecording","start","setState","stopRecording","stop","render","theme","props","style","borderStyling","primaryColor","border","outline","display","flexDirection","alignItems","children","autoPlay","playsInline","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","componentDidMount","_c","$RefreshReg$"],"sources":["/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\n\ninterface State {\n  isFocused: boolean;\n  isRecording: boolean;\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state: State = {\n    isFocused: false,\n    isRecording: false,\n  };\n\n  private videoStream: MediaStream | null = null;\n  private videoElement: HTMLVideoElement | null = null;\n  private mediaRecorder: MediaRecorder | null = null;\n  private recordedChunks: Blob[] = [];\n\n  public componentDidMount(): void {\n    this.startVideoStream();\n  }\n  private startVideoStream = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      this.videoStream = stream;\n\n      this.videoElement = document.createElement('video');\n      this.videoElement.srcObject = stream;\n\n      this.videoElement.onloadedmetadata = () => {\n        this.intervalId = setInterval(() => this.captureAndSendImage(), 2000);\n      };\n\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n    }\n  };\n\n  private captureAndSendImage = () => {\n    if (this.videoElement) {\n      const canvas = document.createElement('canvas');\n      canvas.width = this.videoElement.videoWidth || 0;\n      canvas.height = this.videoElement.videoHeight || 0;\n      const context = canvas.getContext('2d');\n      if (context) {\n        context.drawImage(\n          this.videoElement,\n          0,\n          0,\n          canvas.width,\n          canvas.height\n        );\n  \n        // Convert canvas content to a Blob\n        canvas.toBlob((blob) => {\n          if (blob) {\n            // Create a data URL for the Blob\n            const url = URL.createObjectURL(blob);\n  \n            // Log the URL to the console\n            console.log(url);\n  \n            // Send the URL to Streamlit\n            Streamlit.setComponentValue(url);\n          }\n        }, 'image/jpeg');\n      }\n    }\n  };\n  \n  private startRecording = () => {\n    if (this.mediaRecorder) {\n      this.recordedChunks = [];\n      this.mediaRecorder.start();\n      this.setState({ isRecording: true });\n    }\n  };\n\n  private stopRecording = () => {\n    if (this.mediaRecorder && this.state.isRecording) {\n      this.mediaRecorder.stop();\n      this.setState({ isRecording: false });\n    }\n  };\n  \n  public render = (): ReactNode => {\n       const { theme } = this.props;\n    const style: React.CSSProperties = {};\n\n    if (theme) {\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : 'gray'\n      }`;\n      style.border = borderStyling;\n      style.outline = borderStyling;\n    }\n\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', height: '600px' }}>\n      {this.videoElement && (\n        <video\n          autoPlay\n          playsInline\n          ref={(video) => { if (video) video.srcObject = this.videoStream; }}\n          style={{ width: '100%', height: '100%' }}\n        />\n      )}\n      <button onClick={this.startRecording} disabled={this.state.isRecording}>\n        Start Recording\n      </button>\n      <button onClick={this.stopRecording} disabled={!this.state.isRecording}>\n        Stop Recording\n      </button>\n    </div>\n    );\n  };\n}\n\nexport default withStreamlitConnection(MyComponent);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}