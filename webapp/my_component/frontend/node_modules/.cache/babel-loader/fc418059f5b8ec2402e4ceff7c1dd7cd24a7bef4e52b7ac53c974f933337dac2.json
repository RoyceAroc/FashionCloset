{"ast":null,"code":"var _jsxFileName = \"/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useState, useRef, useCallback } from \"react\";\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    var _s = $RefreshSig$();\n    super(...args);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n    this.render = _s(() => {\n      _s();\n      const webcamRef = useRef(null);\n      const [img, setImg] = useState(null);\n      const capture = useCallback(() => {\n        const imageSrc = webcamRef.current.getScreenshot();\n        setImg(imageSrc);\n      }, [webcamRef]);\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: '500px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Webcam, {\n            screenshotFormat: \"image/jpeg\",\n            audio: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: capture,\n          children: \"Capture photo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this);\n    }, \"1oVMNnxvflJ8Lsn/xMNMxemtO9k=\");\n    /** Click handler for our \"Click Me!\" button. */\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n    /** Focus handler for our \"Click Me!\" button. */\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n    /** Blur handler for our \"Click Me!\" button. */\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","useState","useRef","useCallback","Webcam","jsxDEV","_jsxDEV","MyComponent","constructor","args","_s","$RefreshSig$","state","numClicks","isFocused","render","webcamRef","img","setImg","capture","imageSrc","current","getScreenshot","theme","props","style","borderStyling","primaryColor","border","outline","children","height","screenshotFormat","audio","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onClicked","setState","prevState","setComponentValue","_onFocus","_onBlur","_c","$RefreshReg$"],"sources":["/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { useState, useRef, useCallback, ReactNode } from \"react\";\nimport Webcam from \"react-webcam\";\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  \n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n\n    const webcamRef = useRef(null);\nconst [img, setImg] = useState(null);\n\nconst capture = useCallback(() => {\n  const imageSrc = webcamRef.current.getScreenshot();\n  setImg(imageSrc);\n}, [webcamRef]);\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n\n    return (\n      \n      <span>\n        <div style={{height: '500px'}}>\n\n        <Webcam screenshotFormat='image/jpeg' audio={false}/>\n        </div>\n        <button onClick={capture}>Capture photo</button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}