{"ast":null,"code":"var _jsxFileName = \"/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx\";\nimport React from \"react\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFocused: false\n    };\n    this.videoStream = null;\n    this.animationFrameId = null;\n    this.canvasElement = null;\n    this.videoElement = null;\n    this.startVideoStream = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        this.videoStream = stream;\n        this.videoElement = document.createElement('video');\n        this.videoElement.srcObject = stream;\n        this.videoElement.onloadedmetadata = () => {\n          this.animationFrameId = requestAnimationFrame(this.captureFrames);\n        };\n      } catch (error) {\n        console.error('Error accessing camera:', error);\n      }\n    };\n    this.stopVideoStream = () => {\n      if (this.videoStream) {\n        this.videoStream.getTracks().forEach(track => track.stop());\n      }\n      if (this.animationFrameId) {\n        cancelAnimationFrame(this.animationFrameId);\n      }\n    };\n    this.captureFrames = () => {\n      if (this.videoElement && this.canvasElement) {\n        const context = this.canvasElement.getContext('2d');\n        if (context) {\n          // Draw the video stream onto the canvas\n          context.drawImage(this.videoElement, 0, 0);\n\n          // Convert canvas content to a Blob\n          this.canvasElement.toBlob(blob => {\n            if (blob) {\n              // Create a data URL for the Blob\n              const url = URL.createObjectURL(blob);\n\n              // Log the URL to the console\n              console.log(url);\n\n              // Send the URL to Streamlit\n              // Streamlit.setComponentValue(url);\n            }\n          }, 'image/jpeg');\n        }\n      }\n\n      // Continue capturing frames\n      this.animationFrameId = requestAnimationFrame(this.captureFrames);\n    };\n    this.render = () => {\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      if (theme) {\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : 'gray'}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvas => {\n            this.canvasElement = canvas;\n          },\n          style: {\n            width: '100%',\n            maxWidth: '5000px',\n            height: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  componentDidMount() {\n    this.startVideoStream();\n  }\n  componentWillUnmount() {\n    this.stopVideoStream();\n  }\n}\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","MyComponent","constructor","args","state","isFocused","videoStream","animationFrameId","canvasElement","videoElement","startVideoStream","stream","navigator","mediaDevices","getUserMedia","video","document","createElement","srcObject","onloadedmetadata","requestAnimationFrame","captureFrames","error","console","stopVideoStream","getTracks","forEach","track","stop","cancelAnimationFrame","context","getContext","drawImage","toBlob","blob","url","URL","createObjectURL","log","render","theme","props","style","borderStyling","primaryColor","border","outline","display","flexDirection","alignItems","children","ref","canvas","width","maxWidth","height","fileName","_jsxFileName","lineNumber","columnNumber","componentDidMount","componentWillUnmount","_c","$RefreshReg$"],"sources":["/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\n\ninterface State {\n  isFocused: boolean;\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { isFocused: false };\n  private videoStream: MediaStream | null = null;\n  private animationFrameId: number | null = null;\n  private canvasElement: HTMLCanvasElement | null = null;\n  private videoElement: HTMLVideoElement | null = null;\n\n  public componentDidMount(): void {\n    this.startVideoStream();\n  }\n\n  public componentWillUnmount(): void {\n    this.stopVideoStream();\n  }\n\n  private startVideoStream = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      this.videoStream = stream;\n\n      this.videoElement = document.createElement('video');\n      this.videoElement.srcObject = stream;\n      this.videoElement.onloadedmetadata = () => {\n        this.animationFrameId = requestAnimationFrame(this.captureFrames);\n      };\n\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n    }\n  };\n\n  private stopVideoStream = () => {\n    if (this.videoStream) {\n      this.videoStream.getTracks().forEach((track) => track.stop());\n    }\n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n    }\n  };\n\n  private captureFrames = () => {\n    if (this.videoElement && this.canvasElement) {\n      const context = this.canvasElement.getContext('2d');\n      if (context) {\n        // Draw the video stream onto the canvas\n        context.drawImage(this.videoElement, 0, 0);\n\n        // Convert canvas content to a Blob\n        this.canvasElement.toBlob((blob) => {\n          if (blob) {\n            // Create a data URL for the Blob\n            const url = URL.createObjectURL(blob);\n\n            // Log the URL to the console\n            console.log(url);\n\n            // Send the URL to Streamlit\n            // Streamlit.setComponentValue(url);\n          }\n        }, 'image/jpeg');\n      }\n    }\n\n    // Continue capturing frames\n    this.animationFrameId = requestAnimationFrame(this.captureFrames);\n  };\n\n  public render = (): ReactNode => {\n    const { theme } = this.props;\n    const style: React.CSSProperties = {};\n\n    if (theme) {\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : 'gray'\n      }`;\n      style.border = borderStyling;\n      style.outline = borderStyling;\n    }\n\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <canvas\n          ref={(canvas) => { this.canvasElement = canvas; }}\n          style={{ width: '100%', maxWidth: '5000px', height: 'auto' }}\n        />\n      </div>\n    );\n  };\n}\n\nexport default withStreamlitConnection(MyComponent);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAqB,OAAO;AACxC,SAEEC,sBAAsB,EACtBC,uBAAuB,QAClB,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMjC,MAAMC,WAAW,SAASJ,sBAAsB,CAAQ;EAAAK,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC/CC,KAAK,GAAG;MAAEC,SAAS,EAAE;IAAM,CAAC;IAAA,KAC3BC,WAAW,GAAuB,IAAI;IAAA,KACtCC,gBAAgB,GAAkB,IAAI;IAAA,KACtCC,aAAa,GAA6B,IAAI;IAAA,KAC9CC,YAAY,GAA4B,IAAI;IAAA,KAU5CC,gBAAgB,GAAG,YAAY;MACrC,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;QACzE,IAAI,CAACT,WAAW,GAAGK,MAAM;QAEzB,IAAI,CAACF,YAAY,GAAGO,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;QACnD,IAAI,CAACR,YAAY,CAACS,SAAS,GAAGP,MAAM;QACpC,IAAI,CAACF,YAAY,CAACU,gBAAgB,GAAG,MAAM;UACzC,IAAI,CAACZ,gBAAgB,GAAGa,qBAAqB,CAAC,IAAI,CAACC,aAAa,CAAC;QACnE,CAAC;MAEH,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAAA,KAEOE,eAAe,GAAG,MAAM;MAC9B,IAAI,IAAI,CAAClB,WAAW,EAAE;QACpB,IAAI,CAACA,WAAW,CAACmB,SAAS,CAAC,CAAC,CAACC,OAAO,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MAC/D;MACA,IAAI,IAAI,CAACrB,gBAAgB,EAAE;QACzBsB,oBAAoB,CAAC,IAAI,CAACtB,gBAAgB,CAAC;MAC7C;IACF,CAAC;IAAA,KAEOc,aAAa,GAAG,MAAM;MAC5B,IAAI,IAAI,CAACZ,YAAY,IAAI,IAAI,CAACD,aAAa,EAAE;QAC3C,MAAMsB,OAAO,GAAG,IAAI,CAACtB,aAAa,CAACuB,UAAU,CAAC,IAAI,CAAC;QACnD,IAAID,OAAO,EAAE;UACX;UACAA,OAAO,CAACE,SAAS,CAAC,IAAI,CAACvB,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;;UAE1C;UACA,IAAI,CAACD,aAAa,CAACyB,MAAM,CAAEC,IAAI,IAAK;YAClC,IAAIA,IAAI,EAAE;cACR;cACA,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;;cAErC;cACAX,OAAO,CAACe,GAAG,CAACH,GAAG,CAAC;;cAEhB;cACA;YACF;UACF,CAAC,EAAE,YAAY,CAAC;QAClB;MACF;;MAEA;MACA,IAAI,CAAC5B,gBAAgB,GAAGa,qBAAqB,CAAC,IAAI,CAACC,aAAa,CAAC;IACnE,CAAC;IAAA,KAEMkB,MAAM,GAAG,MAAiB;MAC/B,MAAM;QAAEC;MAAM,CAAC,GAAG,IAAI,CAACC,KAAK;MAC5B,MAAMC,KAA0B,GAAG,CAAC,CAAC;MAErC,IAAIF,KAAK,EAAE;QACT,MAAMG,aAAa,GAAI,aACrB,IAAI,CAACvC,KAAK,CAACC,SAAS,GAAGmC,KAAK,CAACI,YAAY,GAAG,MAC7C,EAAC;QACFF,KAAK,CAACG,MAAM,GAAGF,aAAa;QAC5BD,KAAK,CAACI,OAAO,GAAGH,aAAa;MAC/B;MAEA,oBACE3C,OAAA;QAAK0C,KAAK,EAAE;UAAEK,OAAO,EAAE,MAAM;UAAEC,aAAa,EAAE,QAAQ;UAAEC,UAAU,EAAE;QAAS,CAAE;QAAAC,QAAA,eAC7ElD,OAAA;UACEmD,GAAG,EAAGC,MAAM,IAAK;YAAE,IAAI,CAAC5C,aAAa,GAAG4C,MAAM;UAAE,CAAE;UAClDV,KAAK,EAAE;YAAEW,KAAK,EAAE,MAAM;YAAEC,QAAQ,EAAE,QAAQ;YAAEC,MAAM,EAAE;UAAO;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9D;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAEV,CAAC;EAAA;EAhFMC,iBAAiBA,CAAA,EAAS;IAC/B,IAAI,CAAClD,gBAAgB,CAAC,CAAC;EACzB;EAEOmD,oBAAoBA,CAAA,EAAS;IAClC,IAAI,CAACrC,eAAe,CAAC,CAAC;EACxB;AA2EF;AAEA,eAAAsC,EAAA,GAAehE,uBAAuB,CAACG,WAAW,CAAC;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}