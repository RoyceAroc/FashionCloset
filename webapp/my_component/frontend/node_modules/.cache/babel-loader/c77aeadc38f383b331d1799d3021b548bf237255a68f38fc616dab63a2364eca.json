{"ast":null,"code":"var _jsxFileName = \"/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numClicks: 0,\n      isFocused: false,\n      img: null\n    };\n    this.webcamRef = /*#__PURE__*/React.createRef();\n    this.render = () => {\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      if (theme) {\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.img === null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Webcam, {\n            screenshotFormat: \"image/jpeg\",\n            audio: false,\n            height: 500,\n            width: 500,\n            ref: this.webcamRef,\n            mirrored: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.capture,\n            children: \"Capture photo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: this.state.img,\n            alt: \"screenshot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.recapture,\n            children: \"Recapture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this);\n    };\n    this.capture = () => {\n      var _this$webcamRef$curre;\n      const imageSrc = (_this$webcamRef$curre = this.webcamRef.current) === null || _this$webcamRef$curre === void 0 ? void 0 : _this$webcamRef$curre.getScreenshot();\n      if (imageSrc) {\n        this.setState({\n          img: imageSrc\n        });\n        Streamlit.setComponentValue(imageSrc);\n      }\n    };\n    this.recapture = () => {\n      this.setState({\n        img: null\n      });\n    };\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n}\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","Webcam","jsxDEV","_jsxDEV","Fragment","_Fragment","MyComponent","constructor","args","state","numClicks","isFocused","img","webcamRef","createRef","render","theme","props","style","borderStyling","primaryColor","border","outline","children","screenshotFormat","audio","height","width","ref","mirrored","fileName","_jsxFileName","lineNumber","columnNumber","onClick","capture","src","alt","recapture","_this$webcamRef$curre","imageSrc","current","getScreenshot","setState","setComponentValue","_onFocus","_onBlur","_c","$RefreshReg$"],"sources":["/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\";\nimport Webcam from \"react-webcam\";\n\ninterface State {\n  numClicks: number;\n  isFocused: boolean;\n  img: string | null;\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false, img: null };\n\n  private webcamRef = React.createRef<Webcam>();\n\n  public render = (): ReactNode => {\n    const { theme } = this.props;\n    const style: React.CSSProperties = {};\n\n    if (theme) {\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`;\n      style.border = borderStyling;\n      style.outline = borderStyling;\n    }\n\n    return (\n      <div>\n        {this.state.img === null ? (\n          <>\n            <Webcam\n              screenshotFormat=\"image/jpeg\"\n              audio={false}\n              height={500}\n              width={500}\n              ref={this.webcamRef}\n              mirrored={true}\n            />\n            <button onClick={this.capture}>Capture photo</button>\n          </>\n        ) : (\n          <>\n            <img src={this.state.img} alt=\"screenshot\" />\n            <button onClick={this.recapture}>Recapture</button>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  private capture = (): void => {\n    const imageSrc = this.webcamRef.current?.getScreenshot();\n    if (imageSrc) {\n      this.setState({ img: imageSrc });\n      Streamlit.setComponentValue(imageSrc);\n    }\n  };\n\n  private recapture = (): void => {\n    this.setState({ img: null });\n  };\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true });\n  };\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false });\n  };\n}\n\nexport default withStreamlitConnection(MyComponent);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}