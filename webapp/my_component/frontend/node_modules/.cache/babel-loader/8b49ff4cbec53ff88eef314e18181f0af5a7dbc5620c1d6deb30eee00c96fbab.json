{"ast":null,"code":"var _jsxFileName = \"/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useWebcamScreenshotInterval = duration => {\n  _s();\n  const [stream, setStream] = useState(null);\n  const [screenshots, setScreenshots] = useState([]);\n  useEffect(() => {\n    const constraints = {\n      audio: false,\n      video: true\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => setStream(stream)).catch(error => console.log(error));\n  }, []);\n  useEffect(() => {\n    let interval;\n    if (stream !== null) {\n      const track = stream.getVideoTracks()[0];\n      const imageCapture = new ImageCapture(track);\n      interval = setInterval(() => {\n        imageCapture.takePhoto().then(blob => {\n          setScreenshots(prevState => [...prevState, blob]);\n        }).catch(error => {\n          console.log(error);\n          clearInterval(interval);\n        });\n      }, duration);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [stream, duration]);\n  return screenshots;\n};\n_s(useWebcamScreenshotInterval, \"FdomHa6QoGGCI4mV7Lk+zzdiVfY=\");\nconst MyComponent = ({\n  theme\n}) => {\n  _s2();\n  const [isFocused, setIsFocused] = useState(false);\n  const screenshots = useWebcamScreenshotInterval(1000); // Set the interval duration as needed\n\n  const onFocus = () => {\n    setIsFocused(true);\n  };\n  const onBlur = () => {\n    setIsFocused(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: screenshots.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for screenshots...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: screenshots.map((blob, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: URL.createObjectURL(blob),\n        alt: `screenshot-${index}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s2(MyComponent, \"R+KHLxhkZMJChR3fxA2b/obQIvQ=\", false, function () {\n  return [useWebcamScreenshotInterval];\n});\n_c = MyComponent;\nexport default _c2 = withStreamlitConnection(MyComponent);\nvar _c, _c2;\n$RefreshReg$(_c, \"MyComponent\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["withStreamlitConnection","React","useEffect","useState","jsxDEV","_jsxDEV","useWebcamScreenshotInterval","duration","_s","stream","setStream","screenshots","setScreenshots","constraints","audio","video","navigator","mediaDevices","getUserMedia","then","catch","error","console","log","interval","track","getVideoTracks","imageCapture","ImageCapture","setInterval","takePhoto","blob","prevState","clearInterval","MyComponent","theme","_s2","isFocused","setIsFocused","onFocus","onBlur","children","length","fileName","_jsxFileName","lineNumber","columnNumber","map","index","src","URL","createObjectURL","alt","_c","_c2","$RefreshReg$"],"sources":["/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { useEffect, useState } from \"react\";\n\nconst useWebcamScreenshotInterval = (duration) => {\n  const [stream, setStream] = useState(null);\n  const [screenshots, setScreenshots] = useState([]);\n\n  useEffect(() => {\n    const constraints = {\n      audio: false,\n      video: true,\n    };\n\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then((stream) => setStream(stream))\n      .catch((error) => console.log(error));\n  }, []);\n\n  useEffect(() => {\n    let interval;\n\n    if (stream !== null) {\n      const track = stream.getVideoTracks()[0];\n      const imageCapture = new ImageCapture(track);\n\n      interval = setInterval(() => {\n        imageCapture\n          .takePhoto()\n          .then((blob) => {\n            setScreenshots((prevState) => [...prevState, blob]);\n          })\n          .catch((error) => {\n            console.log(error);\n            clearInterval(interval);\n          });\n      }, duration);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [stream, duration]);\n\n  return screenshots;\n};\n\nconst MyComponent = ({ theme }) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const screenshots = useWebcamScreenshotInterval(1000); // Set the interval duration as needed\n\n  const onFocus = () => {\n    setIsFocused(true);\n  };\n\n  const onBlur = () => {\n    setIsFocused(false);\n  };\n\n  return (\n    <div>\n      {screenshots.length === 0 ? (\n        <p>Waiting for screenshots...</p>\n      ) : (\n        <div>\n          {screenshots.map((blob, index) => (\n            <img\n              key={index}\n              src={URL.createObjectURL(blob)}\n              alt={`screenshot-${index}`}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default withStreamlitConnection(MyComponent);\n"],"mappings":";;;AAAA,SAGEA,uBAAuB,QAClB,yBAAyB;AAChC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,2BAA2B,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd,MAAMW,WAAW,GAAG;MAClBC,KAAK,EAAE,KAAK;MACZC,KAAK,EAAE;IACT,CAAC;IAEDC,SAAS,CAACC,YAAY,CACnBC,YAAY,CAACL,WAAW,CAAC,CACzBM,IAAI,CAAEV,MAAM,IAAKC,SAAS,CAACD,MAAM,CAAC,CAAC,CACnCW,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;EAENnB,SAAS,CAAC,MAAM;IACd,IAAIsB,QAAQ;IAEZ,IAAIf,MAAM,KAAK,IAAI,EAAE;MACnB,MAAMgB,KAAK,GAAGhB,MAAM,CAACiB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;MACxC,MAAMC,YAAY,GAAG,IAAIC,YAAY,CAACH,KAAK,CAAC;MAE5CD,QAAQ,GAAGK,WAAW,CAAC,MAAM;QAC3BF,YAAY,CACTG,SAAS,CAAC,CAAC,CACXX,IAAI,CAAEY,IAAI,IAAK;UACdnB,cAAc,CAAEoB,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAED,IAAI,CAAC,CAAC;QACrD,CAAC,CAAC,CACDX,KAAK,CAAEC,KAAK,IAAK;UAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;UAClBY,aAAa,CAACT,QAAQ,CAAC;QACzB,CAAC,CAAC;MACN,CAAC,EAAEjB,QAAQ,CAAC;IACd;IAEA,OAAO,MAAM;MACX0B,aAAa,CAACT,QAAQ,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,CAACf,MAAM,EAAEF,QAAQ,CAAC,CAAC;EAEtB,OAAOI,WAAW;AACpB,CAAC;AAACH,EAAA,CA1CIF,2BAA2B;AA4CjC,MAAM4B,WAAW,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,GAAA;EACjC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMQ,WAAW,GAAGL,2BAA2B,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEvD,MAAMiC,OAAO,GAAGA,CAAA,KAAM;IACpBD,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBF,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,oBACEjC,OAAA;IAAAoC,QAAA,EACG9B,WAAW,CAAC+B,MAAM,KAAK,CAAC,gBACvBrC,OAAA;MAAAoC,QAAA,EAAG;IAA0B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEjCzC,OAAA;MAAAoC,QAAA,EACG9B,WAAW,CAACoC,GAAG,CAAC,CAAChB,IAAI,EAAEiB,KAAK,kBAC3B3C,OAAA;QAEE4C,GAAG,EAAEC,GAAG,CAACC,eAAe,CAACpB,IAAI,CAAE;QAC/BqB,GAAG,EAAG,cAAaJ,KAAM;MAAE,GAFtBA,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGX,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACV,GAAA,CA7BIF,WAAW;EAAA,QAEK5B,2BAA2B;AAAA;AAAA+C,EAAA,GAF3CnB,WAAW;AA+BjB,eAAAoB,GAAA,GAAetD,uBAAuB,CAACkC,WAAW,CAAC;AAAC,IAAAmB,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}