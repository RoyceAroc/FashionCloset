{"ast":null,"code":"var _jsxFileName = \"/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx\";\nimport React from \"react\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFocused: false\n    };\n    this.videoStream = null;\n    this.intervalId = null;\n    this.canvasElement = null;\n    this.startVideoStream = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        this.videoStream = stream;\n        this.intervalId = setInterval(() => this.captureAndSendImage(), 1000);\n        this.forceUpdate(); // Trigger a re-render to update the canvas\n      } catch (error) {\n        console.error('Error accessing camera:', error);\n      }\n    };\n    this.stopVideoStream = () => {\n      if (this.videoStream) {\n        this.videoStream.getTracks().forEach(track => track.stop());\n      }\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n      }\n    };\n    this.captureAndSendImage = () => {\n      if (this.videoStream && this.canvasElement) {\n        const context = this.canvasElement.getContext('2d');\n        if (context) {\n          // Set the canvas dimensions based on video feed\n          this.canvasElement.width = this.videoStream.getVideoTracks()[0].getSettings().width || 640;\n          this.canvasElement.height = this.videoStream.getVideoTracks()[0].getSettings().height || 480;\n\n          // Draw video frame onto the canvas\n          context.drawImage(this.videoStream.getVideoTracks()[0], 0, 0, this.canvasElement.width, this.canvasElement.height);\n\n          // Convert canvas content to a Blob\n          this.canvasElement.toBlob(blob => {\n            if (blob) {\n              // Create a data URL for the Blob\n              const url = URL.createObjectURL(blob);\n\n              // Log the URL to the console\n              console.log(url);\n\n              // Send the URL to Streamlit\n              // Streamlit.setComponentValue(url);\n            }\n          }, 'image/jpeg');\n        }\n      }\n    };\n    this.render = () => {\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      if (theme) {\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : 'gray'}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvas => {\n            this.canvasElement = canvas;\n          },\n          style: {\n            width: '100%',\n            maxWidth: '5000px',\n            height: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  componentDidMount() {\n    this.startVideoStream();\n  }\n  componentWillUnmount() {\n    this.stopVideoStream();\n  }\n}\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","MyComponent","constructor","args","state","isFocused","videoStream","intervalId","canvasElement","startVideoStream","stream","navigator","mediaDevices","getUserMedia","video","setInterval","captureAndSendImage","forceUpdate","error","console","stopVideoStream","getTracks","forEach","track","stop","clearInterval","context","getContext","width","getVideoTracks","getSettings","height","drawImage","toBlob","blob","url","URL","createObjectURL","log","render","theme","props","style","borderStyling","primaryColor","border","outline","display","flexDirection","alignItems","children","ref","canvas","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","componentDidMount","componentWillUnmount","_c","$RefreshReg$"],"sources":["/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\n\ninterface State {\n  isFocused: boolean;\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { isFocused: false };\n  private videoStream: MediaStream | null = null;\n  private intervalId: NodeJS.Timeout | null = null;\n  private canvasElement: HTMLCanvasElement | null = null;\n\n  public componentDidMount(): void {\n    this.startVideoStream();\n  }\n\n  public componentWillUnmount(): void {\n    this.stopVideoStream();\n  }\n\n  private startVideoStream = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      this.videoStream = stream;\n\n      this.intervalId = setInterval(() => this.captureAndSendImage(), 1000);\n      this.forceUpdate(); // Trigger a re-render to update the canvas\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n    }\n  };\n\n  private stopVideoStream = () => {\n    if (this.videoStream) {\n      this.videoStream.getTracks().forEach((track) => track.stop());\n    }\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  };\n\n  private captureAndSendImage = () => {\n    if (this.videoStream && this.canvasElement) {\n      const context = this.canvasElement.getContext('2d');\n      if (context) {\n        // Set the canvas dimensions based on video feed\n        this.canvasElement.width = this.videoStream.getVideoTracks()[0].getSettings().width || 640;\n        this.canvasElement.height = this.videoStream.getVideoTracks()[0].getSettings().height || 480;\n\n        // Draw video frame onto the canvas\n        context.drawImage(this.videoStream.getVideoTracks()[0], 0, 0, this.canvasElement.width, this.canvasElement.height);\n\n        // Convert canvas content to a Blob\n        this.canvasElement.toBlob((blob) => {\n          if (blob) {\n            // Create a data URL for the Blob\n            const url = URL.createObjectURL(blob);\n\n            // Log the URL to the console\n            console.log(url);\n\n            // Send the URL to Streamlit\n            // Streamlit.setComponentValue(url);\n          }\n        }, 'image/jpeg');\n      }\n    }\n  };\n\n  public render = (): ReactNode => {\n    const { theme } = this.props;\n    const style: React.CSSProperties = {};\n\n    if (theme) {\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : 'gray'\n      }`;\n      style.border = borderStyling;\n      style.outline = borderStyling;\n    }\n\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <canvas\n          ref={(canvas) => { this.canvasElement = canvas; }}\n          style={{ width: '100%', maxWidth: '5000px', height: 'auto' }}\n        />\n      </div>\n    );\n  };\n}\n\nexport default withStreamlitConnection(MyComponent);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}