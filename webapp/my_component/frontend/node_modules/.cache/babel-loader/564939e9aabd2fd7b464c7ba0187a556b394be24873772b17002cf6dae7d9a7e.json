{"ast":null,"code":"var _jsxFileName = \"/Users/royce/Documents/GitHub/aiatl-proj/app/my_component/frontend/src/MyComponent.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useEffect } from \"react\";\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WebcamCapture = () => {\n  _s();\n  const webcamRef = React.useRef(null);\n  const [imageSrc, setImageSrc] = React.useState(undefined);\n  const [isRecording, setIsRecording] = React.useState(false);\n  const [triggerCapture, setTriggerCapture] = React.useState(false);\n  const frameTimestampsRef = React.useRef([]);\n  const fpsIntervalRef = React.useRef(null);\n  const capture = React.useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    const currentTimestamp = Date.now();\n    frameTimestampsRef.current.push(currentTimestamp);\n    const imageData = {\n      instanceId: \"randomString\",\n      imageSrc: imageSrc\n    };\n    Streamlit.setComponentValue({\n      imageData\n    });\n\n    // Trigger re-render by toggling triggerCapture\n    setTriggerCapture(prev => !prev);\n  }, [webcamRef, setImageSrc]);\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n  useEffect(() => {\n    if (isRecording) {\n      const captureFrame = () => {\n        capture();\n        const frameTimestamps = frameTimestampsRef.current;\n        if (frameTimestamps.length >= 2) {\n          const elapsedMilliseconds = frameTimestamps[frameTimestamps.length - 1] - frameTimestamps[0];\n          const fps = (frameTimestamps.length - 1) / (elapsedMilliseconds / 1000);\n          console.log(`FPS: ${fps}`);\n        }\n        if (isRecording) {\n          fpsIntervalRef.current = requestAnimationFrame(captureFrame);\n        }\n      };\n      fpsIntervalRef.current = requestAnimationFrame(captureFrame);\n    } else {\n      cancelAnimationFrame(fpsIntervalRef.current);\n      frameTimestampsRef.current = [];\n    }\n    return () => {\n      cancelAnimationFrame(fpsIntervalRef.current);\n      frameTimestampsRef.current = [];\n    };\n  }, [isRecording, triggerCapture]); // Include triggerCapture as a dependency\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      forceScreenshotSourceSize: true,\n      screenshotFormat: \"image/jpeg\",\n      videoConstraints: {\n        height: 720,\n        width: 1280\n      },\n      height: \"360\",\n      width: \"640\",\n      audio: false,\n      mirrored: true,\n      video: isRecording\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: isRecording ? stopRecording : startRecording,\n        children: isRecording ? \"Stop Recording\" : \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), imageSrc && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageSrc,\n      alt: \"captured\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true);\n};\n_s(WebcamCapture, \"b6OAWxt/iCwC2DkrpNZVHAY+zMw=\");\n_c = WebcamCapture;\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFocused: false\n    };\n    this.onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n    this.onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n    this.render = () => {\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      if (theme) {\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(WebcamCapture, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\nexport default _c2 = withStreamlitConnection(MyComponent);\nvar _c, _c2;\n$RefreshReg$(_c, \"WebcamCapture\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","useEffect","Webcam","jsxDEV","_jsxDEV","Fragment","_Fragment","WebcamCapture","_s","webcamRef","useRef","imageSrc","setImageSrc","useState","undefined","isRecording","setIsRecording","triggerCapture","setTriggerCapture","frameTimestampsRef","fpsIntervalRef","capture","useCallback","current","getScreenshot","currentTimestamp","Date","now","push","imageData","instanceId","setComponentValue","prev","startRecording","stopRecording","captureFrame","frameTimestamps","length","elapsedMilliseconds","fps","console","log","requestAnimationFrame","cancelAnimationFrame","children","ref","forceScreenshotSourceSize","screenshotFormat","videoConstraints","height","width","audio","mirrored","video","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","MyComponent","constructor","args","state","isFocused","onFocus","setState","onBlur","render","theme","props","style","borderStyling","primaryColor","border","outline","_c2","$RefreshReg$"],"sources":["/Users/royce/Documents/GitHub/aiatl-proj/app/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode, useEffect } from \"react\";\nimport Webcam from \"react-webcam\";\n\nconst WebcamCapture = () => {\n  const webcamRef = React.useRef(null);\n  const [imageSrc, setImageSrc] = React.useState(undefined);\n  const [isRecording, setIsRecording] = React.useState(false);\n  const [triggerCapture, setTriggerCapture] = React.useState(false);\n  const frameTimestampsRef = React.useRef([]);\n  const fpsIntervalRef = React.useRef(null);\n\n  const capture = React.useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    const currentTimestamp = Date.now();\n    frameTimestampsRef.current.push(currentTimestamp);\n    const imageData = {\n      instanceId: \"randomString\",\n      imageSrc: imageSrc,\n    };\n\n    Streamlit.setComponentValue({ imageData });\n\n    // Trigger re-render by toggling triggerCapture\n    setTriggerCapture((prev) => !prev);\n  }, [webcamRef, setImageSrc]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  useEffect(() => {\n    if (isRecording) {\n      const captureFrame = () => {\n        capture();\n        const frameTimestamps = frameTimestampsRef.current;\n        if (frameTimestamps.length >= 2) {\n          const elapsedMilliseconds = frameTimestamps[frameTimestamps.length - 1] - frameTimestamps[0];\n          const fps = (frameTimestamps.length - 1) / (elapsedMilliseconds / 1000);\n          console.log(`FPS: ${fps}`);\n        }\n\n        if (isRecording) {\n          fpsIntervalRef.current = requestAnimationFrame(captureFrame);\n        }\n      };\n\n      fpsIntervalRef.current = requestAnimationFrame(captureFrame);\n    } else {\n      cancelAnimationFrame(fpsIntervalRef.current);\n      frameTimestampsRef.current = [];\n    }\n\n    return () => {\n      cancelAnimationFrame(fpsIntervalRef.current);\n      frameTimestampsRef.current = [];\n    };\n  }, [isRecording, triggerCapture]);  // Include triggerCapture as a dependency\n  return (\n    <>\n      <Webcam\n        ref={webcamRef}\n        forceScreenshotSourceSize\n        screenshotFormat=\"image/jpeg\"\n        videoConstraints={{\n          height: 720,\n          width: 1280,\n        }}\n        height=\"360\"\n        width=\"640\"\n        audio={false}\n        mirrored={true}\n        video={isRecording}\n      />\n      <div>\n        <button onClick={isRecording ? stopRecording : startRecording}>\n          {isRecording ? \"Stop Recording\" : \"Start Recording\"}\n        </button>\n      </div>\n      {imageSrc && <img src={imageSrc} alt=\"captured\" />}\n    </>\n  );\n};\n\nclass MyComponent extends StreamlitComponentBase {\n  state = { isFocused: false };\n\n  onFocus = () => {\n    this.setState({ isFocused: true });\n  };\n\n  onBlur = () => {\n    this.setState({ isFocused: false });\n  };\n\n  render = (): ReactNode => {\n    const { theme } = this.props;\n    const style: React.CSSProperties = {};\n\n    if (theme) {\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`;\n      style.border = borderStyling;\n      style.outline = borderStyling;\n    }\n\n    return (\n      <div>\n        <WebcamCapture />\n      </div>\n    );\n  };\n}\n\nexport default withStreamlitConnection(MyComponent);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}