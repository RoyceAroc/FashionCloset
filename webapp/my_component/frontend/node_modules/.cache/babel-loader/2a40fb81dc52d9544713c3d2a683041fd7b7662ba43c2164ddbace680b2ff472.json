{"ast":null,"code":"var _jsxFileName = \"/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx\";\nimport React from \"react\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFocused: false\n    };\n    this.videoStream = null;\n    this.intervalId = null;\n    this.startVideoStream = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        this.videoStream = stream;\n        this.intervalId = setInterval(() => this.captureAndSendImage(stream), 2000);\n      } catch (error) {\n        console.error('Error accessing camera:', error);\n      }\n    };\n    this.stopVideoStream = () => {\n      if (this.videoStream) {\n        this.videoStream.getTracks().forEach(track => track.stop());\n      }\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n      }\n    };\n    this.captureAndSendImage = async stream => {\n      const video = document.createElement('video');\n      video.srcObject = stream;\n      video.onloadedmetadata = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = video.videoWidth || 0;\n        canvas.height = video.videoHeight || 0;\n        const context = canvas.getContext('2d');\n        if (context) {\n          context.drawImage(video, 0, 0, canvas.width, canvas.height);\n          const imageData = canvas.toDataURL('image/jpeg');\n          console.log(imageData);\n          Streamlit.setComponentValue(btoa(imageData));\n        }\n      };\n    };\n    this.render = () => {\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      if (theme) {\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          autoPlay: true,\n          playsInline: true,\n          ref: video => {\n            if (video) video.srcObject = this.videoStream;\n          },\n          style: {\n            width: '100%',\n            maxWidth: '100%',\n            height: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"HMM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  componentDidMount() {\n    this.startVideoStream();\n  }\n  componentWillUnmount() {\n    this.stopVideoStream();\n  }\n}\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Streamlit","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","MyComponent","constructor","args","state","isFocused","videoStream","intervalId","startVideoStream","stream","navigator","mediaDevices","getUserMedia","video","setInterval","captureAndSendImage","error","console","stopVideoStream","getTracks","forEach","track","stop","clearInterval","document","createElement","srcObject","onloadedmetadata","canvas","width","videoWidth","height","videoHeight","context","getContext","drawImage","imageData","toDataURL","log","setComponentValue","btoa","render","theme","props","style","borderStyling","primaryColor","border","outline","display","flexDirection","alignItems","children","autoPlay","playsInline","ref","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","componentDidMount","componentWillUnmount","_c","$RefreshReg$"],"sources":["/Users/royce/Desktop/aiatl/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { useState, useEffect, ReactNode } from \"react\";\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\n\ninterface State {\n  isFocused: boolean;\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { isFocused: false };\n  private videoStream: MediaStream | null = null;\n  private intervalId: NodeJS.Timeout | null = null;\n\n  public componentDidMount(): void {\n    this.startVideoStream();\n  }\n\n  public componentWillUnmount(): void {\n    this.stopVideoStream();\n  }\n\n  private startVideoStream = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      this.videoStream = stream;\n\n      this.intervalId = setInterval(() => this.captureAndSendImage(stream), 2000);\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n    }\n  };\n\n  private stopVideoStream = () => {\n    if (this.videoStream) {\n      this.videoStream.getTracks().forEach((track) => track.stop());\n    }\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  };\n\n  private captureAndSendImage = async (stream: MediaStream) => {\n    const video = document.createElement('video');\n    video.srcObject = stream;\n\n    video.onloadedmetadata = () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = video.videoWidth || 0;\n      canvas.height = video.videoHeight || 0;\n\n      const context = canvas.getContext('2d');\n      if (context) {\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n        const imageData = canvas.toDataURL('image/jpeg');\n        console.log(imageData);\n        Streamlit.setComponentValue(btoa(imageData));\n      }\n    };\n  };\n\n  public render = (): ReactNode => {\n    const { theme } = this.props;\n    const style: React.CSSProperties = {};\n\n    if (theme) {\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`;\n      style.border = borderStyling;\n      style.outline = borderStyling;\n    }\n\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <video\n          autoPlay\n          playsInline\n          ref={(video) => { if (video) video.srcObject = this.videoStream; }}\n          style={{ width: '100%', maxWidth: '100%', height: 'auto' }}\n        />\n        <p>HMM</p>\n      </div>\n    );\n    \n  };\n}\n\nexport default withStreamlitConnection(MyComponent);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}